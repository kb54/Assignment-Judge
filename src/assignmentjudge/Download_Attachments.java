/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignmentjudge;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Address;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.MimeBodyPart;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
/**
 *
 * @author Sunil
 */
public class Download_Attachments extends javax.swing.JFrame {
    private String UserName;
    private String password;
    private int xpos;
    private int ypos;
    /**
     * Creates new form HomePage
     */
    public Download_Attachments() {
        initComponents();
        setBackground(new java.awt.Color(0, 0, 0, 0));
    }
    //Overloaded HomPage constructor to accept data from previous form
    public Download_Attachments(String email, String pass){
        initComponents();
        setBackground(new java.awt.Color(0, 0, 0, 0));
        UserName = email;
        password = pass;
    }
    //public method to update textarea from Email_attachment class;
    /**
     * @param upd to take data from user
    */
    public void update_area(String upd)
    {
        progressarea.append(upd);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        datefrominp = new javax.swing.JTextField();
        timefrominp = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        datetoinp = new javax.swing.JTextField();
        timetoinp = new javax.swing.JTextField();
        downloadbtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        selectfolderbtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        progressarea = new javax.swing.JTextArea();
        exiticn = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Assignment Judge");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 780, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 255, 255));
        jLabel2.setText("From");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 145, 40, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 255, 255));
        jLabel4.setText("Date ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 168, 60, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 255, 255));
        jLabel5.setText("Time ");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 50, -1));

        datefrominp.setForeground(new java.awt.Color(153, 153, 153));
        datefrominp.setText("yyyy/MM/dd");
        datefrominp.setToolTipText("");
        datefrominp.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        datefrominp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                datefrominpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                datefrominpFocusLost(evt);
            }
        });
        datefrominp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datefrominpActionPerformed(evt);
            }
        });
        getContentPane().add(datefrominp, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 165, 140, -1));

        timefrominp.setForeground(new java.awt.Color(153, 153, 153));
        timefrominp.setText("HH:mm:ss");
        timefrominp.setToolTipText("24 hour format");
        timefrominp.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        timefrominp.setName(""); // NOI18N
        timefrominp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timefrominpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                timefrominpFocusLost(evt);
            }
        });
        timefrominp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timefrominpActionPerformed(evt);
            }
        });
        getContentPane().add(timefrominp, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 201, 140, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 255, 255));
        jLabel6.setText("To");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 145, 40, -1));

        datetoinp.setForeground(new java.awt.Color(153, 153, 153));
        datetoinp.setText("yyyy/MM/dd");
        datetoinp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                datetoinpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                datetoinpFocusLost(evt);
            }
        });
        datetoinp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datetoinpActionPerformed(evt);
            }
        });
        getContentPane().add(datetoinp, new org.netbeans.lib.awtextra.AbsoluteConstraints(504, 165, 140, -1));

        timetoinp.setForeground(new java.awt.Color(153, 153, 153));
        timetoinp.setText("HH:mm:ss");
        timetoinp.setToolTipText("24 hour format");
        timetoinp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timetoinpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                timetoinpFocusLost(evt);
            }
        });
        timetoinp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timetoinpActionPerformed(evt);
            }
        });
        getContentPane().add(timetoinp, new org.netbeans.lib.awtextra.AbsoluteConstraints(504, 201, 140, -1));

        downloadbtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        downloadbtn.setForeground(new java.awt.Color(0, 255, 255));
        downloadbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/download.png"))); // NOI18N
        downloadbtn.setText("Click here to download");
        downloadbtn.setBorderPainted(false);
        downloadbtn.setContentAreaFilled(false);
        downloadbtn.setFocusPainted(false);
        downloadbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadbtnActionPerformed(evt);
            }
        });
        getContentPane().add(downloadbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 320, 520, 190));

        jLabel3.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Submission Downloader");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 290, 30));

        jTextField5.setEditable(false);
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 283, 291, -1));

        selectfolderbtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectfolderbtn.setForeground(new java.awt.Color(0, 255, 255));
        selectfolderbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/browse_folder.png"))); // NOI18N
        selectfolderbtn.setText("Select Folder");
        selectfolderbtn.setBorderPainted(false);
        selectfolderbtn.setContentAreaFilled(false);
        selectfolderbtn.setFocusPainted(false);
        selectfolderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectfolderbtnActionPerformed(evt);
            }
        });
        getContentPane().add(selectfolderbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 260, -1, -1));

        progressarea.setEditable(false);
        progressarea.setColumns(20);
        progressarea.setRows(5);
        jScrollPane2.setViewportView(progressarea);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, 340, 450));

        exiticn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/close_1.png"))); // NOI18N
        exiticn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exiticnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exiticnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exiticnMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exiticnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exiticnMouseReleased(evt);
            }
        });
        getContentPane().add(exiticn, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 0, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background(bg3).png"))); // NOI18N
        jLabel7.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel7MouseDragged(evt);
            }
        });
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 530));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selectfolderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectfolderbtnActionPerformed
        try{
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showSaveDialog(null);
        File file = fileChooser.getSelectedFile();
        AssignmentJudge.workingDirectory = file.getAbsolutePath();
        jTextField5.setText(""+AssignmentJudge.workingDirectory);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Please follow the Instructions!");
        }
    }//GEN-LAST:event_selectfolderbtnActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed

    }//GEN-LAST:event_jTextField5ActionPerformed

    private void downloadbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadbtnActionPerformed
        String location = jTextField5.getText();
        if("".equals(location)){
            JOptionPane.showMessageDialog(null, "Please select the folder first");
        }
        else
        {
            String host = "pop.gmail.com";
            String port = "995";
            String saveDirectory = jTextField5.getText();
            //date in yyyy:MM:dd format
            String from_date_str = datefrominp.getText();
            String to_date_str = datetoinp.getText();
            //time in HH:MM:SS fomat
            String from_time = timefrominp.getText();
            String to_time = timetoinp.getText();
            from_date_str = from_date_str + " " + from_time;
            to_date_str = to_date_str + " " + to_time;
            Date from_date = new Date();
            Date to_date = new Date();
            try {
                from_date = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(from_date_str);
            } catch (ParseException ex) {
                Logger.getLogger(Download_Attachments.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                to_date = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(to_date_str);
            } catch (ParseException ex) {
                Logger.getLogger(Download_Attachments.class.getName()).log(Level.SEVERE, null, ex);
            }
            setSaveDirectory(saveDirectory);
            downloadEmailAttachments(host, port, UserName, password, from_date, to_date);
            JOptionPane.showMessageDialog(null, "Downloaded Successfully!\nClick Ok to continue.");
            //Date test_date = new Date();
            //System.out.println(test_date+"\n"+isWithinRange(test_date, to_date, from_date));
        }
    }//GEN-LAST:event_downloadbtnActionPerformed

    private void timetoinpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timetoinpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timetoinpActionPerformed

    private void timetoinpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timetoinpFocusLost
        if(timetoinp.getText().trim().equals(""))
        {
            timetoinp.setText("HH:mm:ss");
            timetoinp.setForeground(new java.awt.Color(153,153,153));
        }
    }//GEN-LAST:event_timetoinpFocusLost

    private void timetoinpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timetoinpFocusGained
        if(timetoinp.getText().equals("HH:mm:ss"))
        {
            timetoinp.setText("");
            timetoinp.setForeground(java.awt.Color.BLACK);
        }
    }//GEN-LAST:event_timetoinpFocusGained

    private void datetoinpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datetoinpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datetoinpActionPerformed

    private void datetoinpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datetoinpFocusLost
        if(datetoinp.getText().trim().equals(""))
        {
            datetoinp.setText("yyyy/MM/dd");
            datetoinp.setForeground(new java.awt.Color(153,153,153));
        }
    }//GEN-LAST:event_datetoinpFocusLost

    private void datetoinpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datetoinpFocusGained
        if(datetoinp.getText().equals("yyyy/MM/dd"))
        {
            datetoinp.setText("");
            datetoinp.setForeground(java.awt.Color.BLACK);
        }
    }//GEN-LAST:event_datetoinpFocusGained

    private void timefrominpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timefrominpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timefrominpActionPerformed

    private void timefrominpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timefrominpFocusLost
        if(timefrominp.getText().trim().equals(""))
        {
            timefrominp.setText("HH:mm:ss");
            timefrominp.setForeground(new java.awt.Color(153,153,153));
        }
    }//GEN-LAST:event_timefrominpFocusLost

    private void timefrominpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timefrominpFocusGained
        if(timefrominp.getText().equals("HH:mm:ss"))
        {
            timefrominp.setText("");
            timefrominp.setForeground(java.awt.Color.BLACK);
        }
    }//GEN-LAST:event_timefrominpFocusGained

    private void datefrominpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datefrominpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datefrominpActionPerformed

    private void datefrominpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datefrominpFocusLost
        if(datefrominp.getText().trim().equals(""))
        {
            datefrominp.setText("yyyy/MM/dd");
            datefrominp.setForeground(new java.awt.Color(153,153,153));
        }
    }//GEN-LAST:event_datefrominpFocusLost

    private void datefrominpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datefrominpFocusGained
        if(datefrominp.getText().equals("yyyy/MM/dd"))
        {
            datefrominp.setText("");
            datefrominp.setForeground(java.awt.Color.BLACK);
        }
    }//GEN-LAST:event_datefrominpFocusGained

    private void exiticnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exiticnMouseClicked
        this.dispose();
    }//GEN-LAST:event_exiticnMouseClicked

    private void exiticnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exiticnMouseEntered
        ImageIcon icn = new ImageIcon(getClass().getResource("/resources/closeho.png"));
        exiticn.setIcon(icn);
    }//GEN-LAST:event_exiticnMouseEntered

    private void exiticnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exiticnMouseExited
        ImageIcon icn = new ImageIcon(getClass().getResource("/resources/close_1.png"));
        exiticn.setIcon(icn);
    }//GEN-LAST:event_exiticnMouseExited

    private void exiticnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exiticnMousePressed
        ImageIcon icn = new ImageIcon(getClass().getResource("/resources/closec.png"));
        exiticn.setIcon(icn);
    }//GEN-LAST:event_exiticnMousePressed

    private void exiticnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exiticnMouseReleased

    }//GEN-LAST:event_exiticnMouseReleased

    private void jLabel7MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xpos, y - ypos);
    }//GEN-LAST:event_jLabel7MouseDragged

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        xpos = evt.getX();
        ypos = evt.getY();
    }//GEN-LAST:event_jLabel7MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Download_Attachments().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField datefrominp;
    private javax.swing.JTextField datetoinp;
    private javax.swing.JButton downloadbtn;
    private javax.swing.JLabel exiticn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextArea progressarea;
    private javax.swing.JButton selectfolderbtn;
    private javax.swing.JTextField timefrominp;
    private javax.swing.JTextField timetoinp;
    // End of variables declaration//GEN-END:variables
    private String saveDirectory;
    /**
     * Sets the directory where attached files will be stored.
     * @param dir absolute path of the directory
     */
    public void setSaveDirectory(String dir) {
        this.saveDirectory = dir;
    }
    /**
     * returns the month number fetched from month name fetched from sentdate
     * @param month name of month
    */
    /*private int fetchmonth(String month)
    {
        String month_arr[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec"};
        for(int i = 1; i <= 12; ++i){
            if(month_arr[i-1].equals(month)){
                return i;
            }
        }
        return -1;
    }*/
    boolean isWithinRange(Date testDate, Date to_Date, Date from_Date) {
        return !(testDate.before(from_Date) || testDate.after(to_Date));
    }
    /**
     * Downloads new messages and saves attachments to disk if any.
     * @param host
     * @param port
     * @param userName
     * @param password
     * @param from_date
     * @param to_date
     */
    //two new parameters added from_date, to_date represents date range 
    public void downloadEmailAttachments(String host, String port,
            String userName, String password, Date from_date, Date to_date){
        Properties properties = new Properties();
 
        // server setting
        properties.put("mail.pop3.host", host);
        properties.put("mail.pop3.port", port);
 
        // SSL setting
        properties.setProperty("mail.pop3.socketFactory.class",
                "javax.net.ssl.SSLSocketFactory");
        properties.setProperty("mail.pop3.socketFactory.fallback", "false");
        properties.setProperty("mail.pop3.socketFactory.port",
                String.valueOf(port));
 
        Session session = Session.getDefaultInstance(properties);
 
        try {
            // connects to the message store
            Store store = session.getStore("pop3");
            store.connect(userName, password);
 
            // opens the inbox folder
            Folder folderInbox = store.getFolder("INBOX");
            folderInbox.open(Folder.READ_ONLY);
 
            // fetches new messages from server
            Message[] arrayMessages = folderInbox.getMessages();
            
            for (int i = 0; i < arrayMessages.length; i++) {
                Message message = arrayMessages[i];
                Address[] fromAddress = message.getFrom();
                String from = fromAddress[0].toString();
                String subject = message.getSubject();
                //String sentDate = message.getSentDate().toString();
                String contentType = message.getContentType();
                String messageContent = "";
 
                // store attachment file name, separated by comma
                String attachFiles = "";
                
                //getting month, date, year and time from sentDate
                /*String sent_Date_split[] = sentDate.split(" ");
                int sent_Date_day = Integer.parseInt(sent_Date_split[2]);
                int sent_Date_year = Integer.parseInt(sent_Date_split[5]);
                int sent_Date_month = fetchmonth(sent_Date_split[1]);
                String time[] = sent_Date_split[3].split(":");
                                
                //getting month year and date from from_date, to_date
                String from_date_split[] = from_date.split("/");
                int from_date_day = Integer.parseInt(from_date_split[0]);
                int from_date_month = Integer.parseInt(from_date_split[1]);
                int from_date_year = Integer.parseInt(from_date_split[2]);
                String to_date_split[] = to_date.split("/");
                int to_date_day = Integer.parseInt(to_date_split[0]);
                int to_date_month = Integer.parseInt(to_date_split[1]);
                int to_date_year = Integer.parseInt(to_date_split[2]);*/
                Date sentDate = message.getSentDate();
                SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                String datetostr = format.format(sentDate);
                Date testDate = format.parse(datetostr);
                System.out.println("\n"+testDate+"\n"+to_date+"\n"+from_date);
                System.out.println("\n"+isWithinRange(testDate, to_date, from_date));
                System.out.println("Message #" + (i + 1) + ":") ;
                
               //check if the date is in the mentioned range
               if (isWithinRange(testDate, to_date, from_date)){
                  if (contentType.contains("multipart")) {
                    // content may contain attachments
                    Multipart multiPart = (Multipart) message.getContent();
                    int numberOfParts = multiPart.getCount();
                    for (int partCount = 0; partCount < numberOfParts; partCount++) {
                        MimeBodyPart part = (MimeBodyPart) multiPart.getBodyPart(partCount);
                        if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition())) {
                            // this part is attachment
                            String fileName = part.getFileName();
                            attachFiles += fileName + ", ";
                            part.saveFile(saveDirectory + File.separator + fileName);
                        } else {
                            // this part may be the message content
                            messageContent = part.getContent().toString();
                        }
                    }
 
                    if (attachFiles.length() > 1) {
                        attachFiles = attachFiles.substring(0, attachFiles.length() - 2);
                    }
                } else if (contentType.contains("text/plain")
                        || contentType.contains("text/html")) {
                    Object content = message.getContent();
                    if (content != null) {
                        messageContent = content.toString();
                    }
                }
                        progressarea.append("\n From: " + from);
                        progressarea.append("\n Sent Date: " + sentDate);
                        progressarea.append("\n Attachments: " + attachFiles);
                        progressarea.append("\n");      
               }
               else {
                   progressarea.append("\n From: " + from);
                   progressarea.append("\n Message: Late Submission");
                   progressarea.append("\n");
               }    
 
                // print out details of each message
                //System.out.println("Message #" + (i + 1) + ":");
                //System.out.println("\t From: " + from);
                //System.out.println("\t Subject: " + subject);
                //System.out.println("\t Sent Date: " + sentDate);
                //System.out.println("\t Message: " + messageContent);
                //System.out.println("\t Attachments: " + attachFiles);
            }
            // disconnect
            progressarea.append("\n\tDownload completed!");
            folderInbox.close(false);
            store.close();
        } catch (NoSuchProviderException ex) {
            System.out.println("No provider for pop3.");
            ex.printStackTrace();
        } catch (MessagingException ex) {
            System.out.println("Could not connect to the message store");
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }
 
    /**
     * Runs this program with Gmail POP3 server
     */
   /*public static void main(String[] args) {
        String host = "pop.gmail.com";
        String port = "995";
        String userName = "dummymailqwert@gmail.com";
        String password = "Qwertyuiop@123";
        String saveDirectory = "C:/Users/Sunil/Desktop/Attachment";
        Email_attachment receiver = new Email_attachment();
        receiver.setSaveDirectory(saveDirectory);
        receiver.downloadEmailAttachments(host, port, userName, password);
    }*/
}
